1. 离线和实时的概念
就是在计算开始前已知所有输入数据，输入数据不会产生变化，一般计算量级较大，计算时间也较长，例如今天早上一点，把昨天累积的日志，计算出所需结果。最经典的就是Hadoop的MapReduce方式。  
输入数据是可以以序列化的方式一个个输入并进行处理的，也就是说在开始的时候并不需要知道所有的输入数据。与离线计算相比，运行时间短，计算量级相对较小。强调计算过程的时间要短，即所查当下给出结果。

2. 批量和流式概念
**批**：处理离线数据，冷数据。单个处理数据量大，处理速度比流慢。 
**流**：在线，实时产生的数据。单次处理的数据量小，但处理速度更快。  

3. 背压机制
Spark 1.5以前版本，用户如果要限制Receiver的数据接收速率，可以通过设置静态配制参数“spark.streaming.receiver.maxRate”的值来实现，此举虽然可以通过限制接收速率，来适配当前的处理能力，
防止内存溢出，但也会引入其它问题。比如：producer数据生产高于maxRate，当前集群处理能力也高于maxRate，这就会造成资源利用率下降等问题。  
为了更好的协调数据接收速率与资源处理能力，1.5版本开始Spark Streaming可以动态控制数据接收速率来适配集群数据处理能力。**背压机制（即Spark Streaming Backpressure）: 
根据JobScheduler反馈作业的执行信息来动态调整Receiver数据接收率**。  通过属性“spark.streaming.backpressure.enabled”来控制是否启用backpressure机制，默认��false，即不启用。 
spark.streaming.kafka.maxRatePerPartition   默认独处分区最大的数据，这个参数默认是没有上线的，即kafka当中有多少数据它就会直接全部拉出
"spark.streaming.backpressure.enabled", "true"
"spark.streaming.kafka.consumer.poll.ms","20000"
"spark.streaming.kafka.maxRatePerPartition", "300"

4. 自定义数据源
需要继承Receiver，并实现onStart、onStop方法来自定义数据源采集

5. kafka数据源
**ReceiverAPI**：需要一个专门的Executor去接收数据，然后发送给其他的Executor做计算。存在的问题，接收数据的Executor和计算的Executor速度会有所不同，特别在接收数据的Executor速度大于计算的Executor速度，
会导致计算数据的节点内存溢出。   
**DirectAPI**：是由计算的Executor来主动消费Kafka的数据，速度由自身控制。

6. kafka消费总结
**0-8 ReceiverAPI**:  
1)专门的Executor读取数据，速度不统一  
2)跨机器传输数据，WAL  
3)Executor读取数据通过多个线程的方式，想要增加并行度，则需要多个流union  
4)offset存储在Zookeeper中   

**0-8 DirectAPI**:  
1)Executor读取数据并计算  
2)增加Executor个数来增加消费的并行度  
3)offset存储  
a)CheckPoint(getActiveOrCreate方式创建StreamingContext)  
b)手动维护(有事务的存储系统)  
c)获取offset必须在第一个调用的算子中：offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges  

7. 有状态的转换
UpdateStateByKey  算子用于将历史结果应用到当前批次，该操作允许在使用新信息不断更新状态的同时能够保留他的状态。
mapWithState
windows  
Spark Streaming 也提供了窗口计算, 允许执行转换操作作用在一个窗口内的数据。默认情况下, 计算只对一个时间段内的RDD进行, 有了窗口之后, 可以把计算应用到一个指定的窗口内的所有RDD上。
一个窗口可以包含多个时间段，基于窗口的操作会在一个比StreamingContext的批次间隔更长的时间范围内，通过整合多个批次的结果，计算出整个窗口的结果。所有基于窗口的操作都需要两个参数，
分别为**窗口时长**以及**滑动步长**。  
**窗口时长：计算内容的时间范围；**    
**滑动步长：隔多久触发一次计算。**  
**注意：这两者都必须为采集周期的整数倍。**  
```
例如：一小时人流量的变化，窗口（6秒）和间隔（3秒）不一致，不一定从程序启动开始
需求：WordCount统计 3秒一个批次，窗口6秒，滑步3秒。
```

2）关于Window的操作还有如下方法
window(windowLength, slideInterval)
countByWindow
countByValueAndWindow
reduceByWindow
reduceByKeyAndWindow


